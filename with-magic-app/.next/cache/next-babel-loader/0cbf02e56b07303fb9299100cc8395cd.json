{"ast":null,"code":"import { serialize, parse } from 'cookie';\nconst TOKEN_NAME = 'token';\nconst MAX_AGE = 60 * 60 * 8; // 8 hours\n\nexport function setTokenCookie(res, token) {\n  const cookie = serialize(TOKEN_NAME, token, {\n    maxAge: MAX_AGE,\n    expires: new Date(Date.now() + MAX_AGE * 1000),\n    httpOnly: true,\n    secure: false,\n    path: '/',\n    sameSite: 'lax'\n  });\n  res.setHeader('Set-Cookie', cookie);\n}\nexport function removeTokenCookie(res) {\n  const cookie = serialize(TOKEN_NAME, '', {\n    maxAge: -1,\n    path: '/'\n  });\n  res.setHeader('Set-Cookie', cookie);\n}\nexport function parseCookies(req) {\n  var _req$headers;\n\n  // For API Routes we don't need to parse the cookies.\n  if (req.cookies) return req.cookies; // For pages we do need to parse the cookies.\n\n  const cookie = (_req$headers = req.headers) === null || _req$headers === void 0 ? void 0 : _req$headers.cookie;\n  return parse(cookie || '');\n}\nexport function getTokenCookie(req) {\n  const cookies = parseCookies(req);\n  return cookies[TOKEN_NAME];\n}","map":{"version":3,"sources":["/Users/davidgabeau/Desktop/glo/nextjs-blog/with-magic-app/lib/auth-cookies.js"],"names":["serialize","parse","TOKEN_NAME","MAX_AGE","setTokenCookie","res","token","cookie","maxAge","expires","Date","now","httpOnly","secure","path","sameSite","setHeader","removeTokenCookie","parseCookies","req","cookies","headers","getTokenCookie"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,KAApB,QAAiC,QAAjC;AAEA,MAAMC,UAAU,GAAG,OAAnB;AACA,MAAMC,OAAO,GAAG,KAAK,EAAL,GAAU,CAA1B,C,CAA4B;;AAE5B,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,KAA7B,EAAoC;AACzC,QAAMC,MAAM,GAAGP,SAAS,CAACE,UAAD,EAAaI,KAAb,EAAoB;AAC1CE,IAAAA,MAAM,EAAEL,OADkC;AAE1CM,IAAAA,OAAO,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaR,OAAO,GAAG,IAAhC,CAFiC;AAG1CS,IAAAA,QAAQ,EAAE,IAHgC;AAI1CC,IAAAA,MAAM,OAJoC;AAK1CC,IAAAA,IAAI,EAAE,GALoC;AAM1CC,IAAAA,QAAQ,EAAE;AANgC,GAApB,CAAxB;AAQAV,EAAAA,GAAG,CAACW,SAAJ,CAAc,YAAd,EAA4BT,MAA5B;AACD;AAED,OAAO,SAASU,iBAAT,CAA2BZ,GAA3B,EAAgC;AACrC,QAAME,MAAM,GAAGP,SAAS,CAACE,UAAD,EAAa,EAAb,EAAiB;AACvCM,IAAAA,MAAM,EAAE,CAAC,CAD8B;AAEvCM,IAAAA,IAAI,EAAE;AAFiC,GAAjB,CAAxB;AAKAT,EAAAA,GAAG,CAACW,SAAJ,CAAc,YAAd,EAA4BT,MAA5B;AACD;AAED,OAAO,SAASW,YAAT,CAAsBC,GAAtB,EAA2B;AAAA;;AAChC;AACA,MAAIA,GAAG,CAACC,OAAR,EAAiB,OAAOD,GAAG,CAACC,OAAX,CAFe,CAIhC;;AACA,QAAMb,MAAM,mBAAGY,GAAG,CAACE,OAAP,iDAAG,aAAad,MAA5B;AACA,SAAON,KAAK,CAACM,MAAM,IAAI,EAAX,CAAZ;AACD;AAED,OAAO,SAASe,cAAT,CAAwBH,GAAxB,EAA6B;AAClC,QAAMC,OAAO,GAAGF,YAAY,CAACC,GAAD,CAA5B;AACA,SAAOC,OAAO,CAAClB,UAAD,CAAd;AACD","sourcesContent":["import { serialize, parse } from 'cookie'\n\nconst TOKEN_NAME = 'token'\nconst MAX_AGE = 60 * 60 * 8 // 8 hours\n\nexport function setTokenCookie(res, token) {\n  const cookie = serialize(TOKEN_NAME, token, {\n    maxAge: MAX_AGE,\n    expires: new Date(Date.now() + MAX_AGE * 1000),\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    path: '/',\n    sameSite: 'lax',\n  })\n  res.setHeader('Set-Cookie', cookie)\n}\n\nexport function removeTokenCookie(res) {\n  const cookie = serialize(TOKEN_NAME, '', {\n    maxAge: -1,\n    path: '/',\n  })\n\n  res.setHeader('Set-Cookie', cookie)\n}\n\nexport function parseCookies(req) {\n  // For API Routes we don't need to parse the cookies.\n  if (req.cookies) return req.cookies\n\n  // For pages we do need to parse the cookies.\n  const cookie = req.headers?.cookie\n  return parse(cookie || '')\n}\n\nexport function getTokenCookie(req) {\n  const cookies = parseCookies(req)\n  return cookies[TOKEN_NAME]\n}\n"]},"metadata":{},"sourceType":"module"}