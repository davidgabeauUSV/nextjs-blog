{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { magic } from '../../lib/magic';\nimport { encryptSession } from '../../lib/iron';\nimport { setTokenCookie } from '../../lib/auth-cookies';\nexport default async function login(req, res) {\n  try {\n    const didToken = req.headers.authorization.substr(7);\n    const metadata = await magic.users.getMetadataByToken(didToken);\n\n    const session = _objectSpread({}, metadata); // The token is a string with the encrypted session\n\n\n    const token = await encryptSession(session);\n    setTokenCookie(res, token);\n    res.status(200).send({\n      done: true\n    });\n  } catch (error) {\n    res.status(error.status || 500).end(error.message);\n  }\n}","map":{"version":3,"sources":["/Users/davidgabeau/Desktop/glo/nextjs-blog/with-magic-app/pages/api/login.js"],"names":["magic","encryptSession","setTokenCookie","login","req","res","didToken","headers","authorization","substr","metadata","users","getMetadataByToken","session","token","status","send","done","error","end","message"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,iBAAtB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AAEA,eAAe,eAAeC,KAAf,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+B;AAC5C,MAAI;AACF,UAAMC,QAAQ,GAAGF,GAAG,CAACG,OAAJ,CAAYC,aAAZ,CAA0BC,MAA1B,CAAiC,CAAjC,CAAjB;AACA,UAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,KAAN,CAAYC,kBAAZ,CAA+BN,QAA/B,CAAvB;;AACA,UAAMO,OAAO,qBAAQH,QAAR,CAAb,CAHE,CAIF;;;AACA,UAAMI,KAAK,GAAG,MAAMb,cAAc,CAACY,OAAD,CAAlC;AACAX,IAAAA,cAAc,CAACG,GAAD,EAAMS,KAAN,CAAd;AACAT,IAAAA,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAArB;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACdb,IAAAA,GAAG,CAACU,MAAJ,CAAWG,KAAK,CAACH,MAAN,IAAgB,GAA3B,EAAgCI,GAAhC,CAAoCD,KAAK,CAACE,OAA1C;AACD;AACF","sourcesContent":["import { magic } from '../../lib/magic'\nimport { encryptSession } from '../../lib/iron'\nimport { setTokenCookie } from '../../lib/auth-cookies'\n\nexport default async function login(req, res) {\n  try {\n    const didToken = req.headers.authorization.substr(7)\n    const metadata = await magic.users.getMetadataByToken(didToken)\n    const session = { ...metadata }\n    // The token is a string with the encrypted session\n    const token = await encryptSession(session)\n    setTokenCookie(res, token)\n    res.status(200).send({ done: true })\n  } catch (error) {\n    res.status(error.status || 500).end(error.message)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}