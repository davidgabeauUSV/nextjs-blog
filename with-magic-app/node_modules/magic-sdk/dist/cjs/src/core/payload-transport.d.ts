import { MagicIncomingWindowMessage, MagicOutgoingWindowMessage, JsonRpcRequestPayload, MagicMessageEvent } from '../types';
import { IframeController } from './iframe-controller';
import { JsonRpcResponse } from './json-rpc';
interface RemoveEventListenerFunction {
    (): void;
}
export declare class PayloadTransport {
    private readonly endpoint;
    private readonly encodedQueryParams;
    private messageHandlers;
    /**
     * Create an instance of `PayloadTransport`
     *
     * @param overlay - The `IframeController` context to which the event will be
     * posted.
     * @param endpoint - The URL for the relevant iframe context.
     * @param encodedQueryParams - The unique, encoded query parameters for the
     * relevant iframe context.
     */
    constructor(endpoint: string, encodedQueryParams: string);
    /**
     * Send a payload to the Magic `<iframe>` for processing and automatically
     * handle the acknowledging follow-up event(s).
     *
     * @param msgType - The type of message to encode with the data.
     * @param payload - The JSON RPC payload to emit via `window.postMessage`.
     */
    post<ResultType = any>(overlay: IframeController, msgType: MagicOutgoingWindowMessage, payload: JsonRpcRequestPayload[]): Promise<JsonRpcResponse<ResultType>[]>;
    post<ResultType = any>(overlay: IframeController, msgType: MagicOutgoingWindowMessage, payload: JsonRpcRequestPayload): Promise<JsonRpcResponse<ResultType>>;
    /**
     * Listen for events received with the given `msgType`.
     *
     * @param msgType - The `msgType` encoded with the event data.
     * @param handler - A handler function to execute on each event received.
     * @return A `void` function to remove the attached event.
     */
    on(msgType: MagicIncomingWindowMessage, handler: (this: Window, event: MagicMessageEvent) => any): RemoveEventListenerFunction;
    /**
     * Initialize the underlying `Window.onmessage` event listener.
     */
    private initMessageListener;
}
export {};
